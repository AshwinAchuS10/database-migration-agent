"""
Data validation script for SQL to NoSQL migration
Generated by Migration Planner Agent
"""

import pymongo
import sqlalchemy
from sqlalchemy import create_engine, text
from pymongo import MongoClient

def validate_migration():
    """Validate data integrity after migration"""
    
    sql_engine = create_engine('sqlite:///example.db')
    mongo_client = MongoClient('mongodb://localhost:27017/')
    db = mongo_client['migrated_db']
    
    validation_results = {
        "total_tables": 0,
        "validated_tables": 0,
        "errors": [],
        "warnings": []
    }
    
    try:
        # Validate each collection
        collections = db.list_collection_names()
        
        for collection_name in collections:
            validation_results["total_tables"] += 1
            
            # Count records in both databases
            sql_count = get_sql_count(sql_engine, collection_name)
            mongo_count = db[collection_name].count_documents({})
            
            if sql_count != mongo_count:
                validation_results["errors"].append(f"Record count mismatch for {collection_name}: SQL={sql_count}, MongoDB={mongo_count}")
            else:
                validation_results["validated_tables"] += 1
                print(f"âœ“ {collection_name}: {mongo_count} records validated")
        
        # Summary
        print(f"\nValidation Summary:")
        print(f"Total tables: {validation_results['total_tables']}")
        print(f"Validated: {validation_results['validated_tables']}")
        print(f"Errors: {len(validation_results['errors'])}")
        
        return validation_results
        
    except Exception as e:
        print(f"Validation error: {str(e)}")
        return validation_results
    finally:
        sql_engine.dispose()
        mongo_client.close()

def get_sql_count(engine, table_name):
    """Get record count from SQL table"""
    with engine.connect() as conn:
        query = text(f"SELECT COUNT(*) FROM {table_name}")
        result = conn.execute(query)
        return result.scalar()

if __name__ == "__main__":
    validate_migration()